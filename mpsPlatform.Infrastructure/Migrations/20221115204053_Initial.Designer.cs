// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mpsPlatform.Infrastructure.Data;

#nullable disable

namespace mpsPlatform.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221115204053_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5cbac67a-d789-479c-8368-9e878a4c4c7f",
                            Email = "admin@mpsPlatform.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@mpsplatform.com",
                            NormalizedUserName = "admin@mpsplatform.com",
                            PasswordHash = "AQAAAAEAACcQAAAAECg1FoRAyl6PL6FCheDcsaMUWSfYESVGq39aTG6cy8G7q4dP9Vy7ZJvkve82eCChCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b3dec3a-369b-4d6a-88de-2ad76293e715",
                            TwoFactorEnabled = false,
                            UserName = "admin@mpsPlatform.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.ЕquipmentLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ЕquipmentLocations");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.ЕquipmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EquimpentType")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("MaxPaperType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("МanifacturerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("МanifacturerId");

                    b.ToTable("ЕquipmentModels");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.Мanifacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Мanifacturers");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.CounterColorA3", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CurrentCounter")
                        .HasColumnType("int");

                    b.Property<int>("DateOfEntryId")
                        .HasColumnType("int");

                    b.Property<int>("EquimpentSerialNumberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DateOfEntryId");

                    b.HasIndex("EquimpentSerialNumberId");

                    b.ToTable("CountersColorA3");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.CounterColorA4", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CurrentCounter")
                        .HasColumnType("int");

                    b.Property<int>("DateOfEntryId")
                        .HasColumnType("int");

                    b.Property<int>("EquimpentSerialNumberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DateOfEntryId");

                    b.HasIndex("EquimpentSerialNumberId");

                    b.ToTable("CountersColorA4");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.CounterMonochromeA3", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CurrentCounter")
                        .HasColumnType("int");

                    b.Property<int>("DateOfEntryId")
                        .HasColumnType("int");

                    b.Property<int>("EquimpentSerialNumberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DateOfEntryId");

                    b.HasIndex("EquimpentSerialNumberId");

                    b.ToTable("CountersMonochromeA3");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.CounterMonochromeA4", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CurrentCounter")
                        .HasColumnType("int");

                    b.Property<int>("DateOfEntryId")
                        .HasColumnType("int");

                    b.Property<int>("EquimpentSerialNumberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DateOfEntryId");

                    b.HasIndex("EquimpentSerialNumberId");

                    b.ToTable("CountersMonochromeA4");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.DateOfEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DatesOfEntrys");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.EquimpentSerialNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceColorA3")
                        .HasPrecision(10, 8)
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal>("PriceColorA4")
                        .HasPrecision(10, 8)
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal>("PriceMonochromeA3")
                        .HasPrecision(10, 8)
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal>("PriceMonochromeA4")
                        .HasPrecision(10, 8)
                        .HasColumnType("decimal(10,8)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ЕquipmentLocationId")
                        .HasColumnType("int");

                    b.Property<int>("ЕquipmentModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ЕquipmentLocationId");

                    b.HasIndex("ЕquipmentModelId");

                    b.ToTable("EquimpentSerialNumbers");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.InstallerMan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("InstallersPeople");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.SparePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Resource")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SpareParts");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.SparePartModel", b =>
                {
                    b.Property<int>("SparePartId")
                        .HasColumnType("int");

                    b.Property<int>("ЕquipmentModelId")
                        .HasColumnType("int");

                    b.HasKey("SparePartId", "ЕquipmentModelId");

                    b.HasIndex("ЕquipmentModelId");

                    b.ToTable("SparePartsModels");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.ЕquipmentLocation", b =>
                {
                    b.HasOne("mpsPlatform.Infrastructure.Data.Models.Customer", "Customer")
                        .WithMany("ЕquipmentLocations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.ЕquipmentModel", b =>
                {
                    b.HasOne("mpsPlatform.Infrastructure.Data.Models.Мanifacturer", "Мanifacturer")
                        .WithMany("ЕquipmentModels")
                        .HasForeignKey("МanifacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Мanifacturer");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.Contract", b =>
                {
                    b.HasOne("mpsPlatform.Infrastructure.Data.Models.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.CounterColorA3", b =>
                {
                    b.HasOne("mpsPlatform.Infrastructure.Data.Models.DateOfEntry", "DateOfEntry")
                        .WithMany("CountersColorA3")
                        .HasForeignKey("DateOfEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mpsPlatform.Infrastructure.Data.Models.EquimpentSerialNumber", "EquimpentSerialNumber")
                        .WithMany("CountersColorA3")
                        .HasForeignKey("EquimpentSerialNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DateOfEntry");

                    b.Navigation("EquimpentSerialNumber");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.CounterColorA4", b =>
                {
                    b.HasOne("mpsPlatform.Infrastructure.Data.Models.DateOfEntry", "DateOfEntry")
                        .WithMany("CountersColorA4")
                        .HasForeignKey("DateOfEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mpsPlatform.Infrastructure.Data.Models.EquimpentSerialNumber", "EquimpentSerialNumber")
                        .WithMany("CountersColorA4")
                        .HasForeignKey("EquimpentSerialNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DateOfEntry");

                    b.Navigation("EquimpentSerialNumber");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.CounterMonochromeA3", b =>
                {
                    b.HasOne("mpsPlatform.Infrastructure.Data.Models.DateOfEntry", "DateOfEntry")
                        .WithMany("CountersMonochromeA3")
                        .HasForeignKey("DateOfEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mpsPlatform.Infrastructure.Data.Models.EquimpentSerialNumber", "EquimpentSerialNumber")
                        .WithMany("CountersMonochromeA3")
                        .HasForeignKey("EquimpentSerialNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DateOfEntry");

                    b.Navigation("EquimpentSerialNumber");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.CounterMonochromeA4", b =>
                {
                    b.HasOne("mpsPlatform.Infrastructure.Data.Models.DateOfEntry", "DateOfEntry")
                        .WithMany("CountersMonochromeA4")
                        .HasForeignKey("DateOfEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mpsPlatform.Infrastructure.Data.Models.EquimpentSerialNumber", "EquimpentSerialNumber")
                        .WithMany("CountersMonochromeA4")
                        .HasForeignKey("EquimpentSerialNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DateOfEntry");

                    b.Navigation("EquimpentSerialNumber");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.EquimpentSerialNumber", b =>
                {
                    b.HasOne("mpsPlatform.Infrastructure.Data.Models.Contract", "Contract")
                        .WithMany("EquimpentSerialNumbers")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mpsPlatform.Infrastructure.Data.Models.ЕquipmentLocation", "ЕquipmentLocation")
                        .WithMany("EquimpentSerialNumbers")
                        .HasForeignKey("ЕquipmentLocationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("mpsPlatform.Infrastructure.Data.Models.ЕquipmentModel", "ЕquipmentModel")
                        .WithMany("EquimpentSerialNumbers")
                        .HasForeignKey("ЕquipmentModelId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("ЕquipmentLocation");

                    b.Navigation("ЕquipmentModel");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.SparePartModel", b =>
                {
                    b.HasOne("mpsPlatform.Infrastructure.Data.Models.SparePart", "SparePart")
                        .WithMany("SparePartsModels")
                        .HasForeignKey("SparePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mpsPlatform.Infrastructure.Data.Models.ЕquipmentModel", "ЕquipmentModel")
                        .WithMany("SparePartsModels")
                        .HasForeignKey("ЕquipmentModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SparePart");

                    b.Navigation("ЕquipmentModel");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.ЕquipmentLocation", b =>
                {
                    b.Navigation("EquimpentSerialNumbers");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.ЕquipmentModel", b =>
                {
                    b.Navigation("EquimpentSerialNumbers");

                    b.Navigation("SparePartsModels");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.Мanifacturer", b =>
                {
                    b.Navigation("ЕquipmentModels");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.Contract", b =>
                {
                    b.Navigation("EquimpentSerialNumbers");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.Customer", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("ЕquipmentLocations");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.DateOfEntry", b =>
                {
                    b.Navigation("CountersColorA3");

                    b.Navigation("CountersColorA4");

                    b.Navigation("CountersMonochromeA3");

                    b.Navigation("CountersMonochromeA4");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.EquimpentSerialNumber", b =>
                {
                    b.Navigation("CountersColorA3");

                    b.Navigation("CountersColorA4");

                    b.Navigation("CountersMonochromeA3");

                    b.Navigation("CountersMonochromeA4");
                });

            modelBuilder.Entity("mpsPlatform.Infrastructure.Data.Models.SparePart", b =>
                {
                    b.Navigation("SparePartsModels");
                });
#pragma warning restore 612, 618
        }
    }
}
